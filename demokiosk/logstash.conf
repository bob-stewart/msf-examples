input {
	gelf {	
		port => 12201
		type => gelf
	}
}

filter {
	if [type] == "gelf" {
		# the message field represents what was written to stdout in the container
		grok {
			match => {
				"message" => [
					"(?<json_string>^\{.*\}\s*$)",  # if starts/ends with curly brace, assume json and set to json_string variable
					"%{GREEDYDATA:text_string}"     # otherwise, just take the entire text blob and set to text_string variable
				]
			}
		}

		if [level] {
			mutate {
				replace => { "level" => "3" }
				add_tag => [ "polyverse" ]
			}
		}

		# if json_string is set, marshal the object; properties will be written to root node, overwriting any preexisting fields with the same name.
		if [json_string] {
			mutate {
				remove_field => [ "source", "message" ]
				add_tag => [ "json_string" ]
			}
			json {
				source => "json_string"
			}
			mutate {
				remove_field => [ "json_string" ]
			}
		} else {		# message is not json, so create json_obj and set message property
			if [text_string] {
				mutate {
					replace => { "message" => "%{text_string}" }
					remove_field => [ "text_string" ]
					add_tag => [ "text_string" ]
				}
			} else {
				mutate {
					replace => { "message" => "" }
					add_tag => [ "empty_string" ]
				}
			}
		}
	}

#	grok {
#		match => {
#			"message" => [
#				"Container %{WORD:app_container_name} is .*$"
#			]
#		}
#	}

	if [log_type] == "access_log" {
		mutate { add_field => { "Event" => "router.request.%{Status}" } }
	}
	if ![ContainerId] {
   		mutate { add_field => { "ContainerId" => "%{container_id}" } }
	}

	if ![ContainerName] {
		mutate { add_field => { "ContainerName" => "%{container_name}" } }
	}

	if ![timestamp] {
		mutate { add_field => { "timestamp" => "%{@timestamp}" } }
	}
}

output {
	elasticsearch {
		hosts => ["elasticsearch:9200"]
	}
	if [Event] {
		stdout {
			codec => line {
				format => '{"Event":"%{Event}","ContainerId":"%{ContainerId}","ContainerName":"%{ContainerName}","Message":"%{message}","timestamp":"%{timestamp}"}'
			}
		}
	}
}
